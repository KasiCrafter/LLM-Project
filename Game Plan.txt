[INI]
-Using HTML5's native FileReader system, we can make our own custom INI file without needing messy permissions on the OS level.
1.) This file will have instructions (in the form of comments and examples) of how to fill in variables.
2.) These include: 
	spritesheets (and their Rows x Columns as defined by the dev), 
	character names(which will be IMPORTANT as these names will be used, in their text form, to retrieve and parse spritesheets and hitboxes),
	global microgame rules/settings,
	and various other settings that will make themselves known with time
3.) Once input, the codebase will parse it using a custom function that impliments all the data into the appropriate references and 			variables. Which leads to...

[Objects] (everything is case insensitive by the way; because artists hate picky spelling. same tbh)
-Objects describe a wide net, including sprite sheets, animations, assets, and characters. Their file names will play a CRITICAL part of how they are handled in the codebase.
	1.) At load time, the codebase will see if all items defined in the INI exist and are valid.

	2.) Objects will be stored by their prefix string in a dictionary/array/class(?), with said prefix being a character or background name.	Each keyed pair will contain all the file locations associated with that prefix, along with the hitbox data of said object.

	3.) This will be done by using a regular expression to read the text before the ".png" or ".txt" stuffix of the image. If the regular		expression has a named key (as defined as a character in the INI), it is added under that character's collection.

	4.) To access different spritesheets of the same character, the regular expression will also store whatever that is not the name prefix	 	 or file type suffix into it's own tag under the  prefix. (Example: "BunBun", "BunBunHeart.png", "BunBunMad.png, and 					"BunBunHitboxes.txt" would be stored as "bunbun" wih the sub sections "heart", "mad", and "hitboxes", respectively. Instead of 			calling "BunBunHitboxes", just call selectAsset("BunBun","hitboxes"), which is a cleaner, more modular approach.)

	5.) For subsections of subsections, the same applies recursively. (Example: "BunBun", "BunBunHeart.png", and "BunBunHitboxes.txt") 			would be stores as "bunbun", with "heart" as a subsection of it, with "hitboxes" bring a subset of "heart". (Example: to call a 		specific hitbox map of BunBun, you'd call the specific branch by selectAsset("BunBun","Heart","Hitboxes") instead).

	6.) To call a specific frame of a sprite, the last parameter must be an integer at the end of the normal call. This works even for 			hitbox files. (Example: selectAsset("BunBun","Hitboxes", 2) or selectAsset("BunBun","Heart,3"). Calling Hitboxess by frame 				is useful for animations that have changing hitboxes over time).

	7.) Once an asset is selected with selectAsset, it is placed into a temporary holding variable. This variable is called on by various 		worker functions which take simple parameters. This is useful for minimizing code and speeding up workflow. [Watch out for timing 		bugs]	(Example: selectAsset("BunBun","Mad", 2); moveX(-30); advanceFrame(); setLoopsPerSec(3);   )

	8.) It's also possible to move up in scope of the same asset base by using swapSuffix(). Simply type the name of the path you want to 		move to under the same prefix. (Ex: selectAsset("BunBun","Mad", 2); moveX(-30); swapSuffix("Heart", 5);)

	9.) There are also the selectMulti(). The function accepts its arguments in the form of arrays. For each asset you want to select, input 	the same arguments in the same order you'd call with selectAsset(). This allows you to do the same operation on different assets.

		(Example: selectMulti(["BunBun","Oww",0], ["Nidoran", "Oww", 2]); setLoopsPerSec(5);)

		<Example with more human formatting:>

		selectMulti(

		["BunBun","Oww",0], 
		["Nidoran", "Oww", 2] 

		);
		setLoopsPerSec(5);  


		The selectDummy() command allows you to specify a branch or sub branch without throwing an error. This function takes no prefix, so it's useful for iterating or sowing together different strings. Attempting to call a worker function with a selectDummy selected    will simply "freeze" worker functions until a prefix is selected. At that point, all the operations done on the dummy will instead be instantly applied to the new, prefixed asset.

		The swapPrefix() command is relatively straightforward; while keeping the same subset tree as the previously selected asset, the name prefix is swapped for another. This makes for quick switching of different assets, less redundant code, and grants the ability to switch between similar assets where the order of operations matter. Fun with conditionals!


		selectAsset("Didi","Chatter",0);
		moveXY(10, -50);
		setLoopsPerSecond(30);

		selectDummy("Heart", 5);

		setLoopsPerSec(2); <----- Didi is no longer selected here. This operation will not go into effect until it gets a prefix.

		if (points > 5) {
			swapPrefix("BunBun");
		}
		else {
			swapPrefix("Andy");
		}	

		^-------Once either select function is called, its prefix will instantly replace the selected Dummy asset while keeping all the 			modifications made to it. In this example, it could be either ("Andy","Heart", 5) or ("BunBun", "Heart", 5). Whichever is 			selected will also gain the loop speed of 2 per second, as defined before the conditional. NOTE, the application of effects 		is INSTANT. Therfore you should declare time sensitive operations only AFTER the dummy asset is replaced. You must also be 			careful if the reffered frame number is out of bounds, as the error will only happen at the time of prefix assignment 				instead of the invocation of selectDummy.



		Also useful are the holdAsset(), recallAsset(), and deselectAsset() functions. The first two, when used in conjunction, will keep the currently selected asset for later use, while the other retrieves that asset, respectively. while recallAsset() is functionally the same as selectAsset(), holdAsset() deselects the current selection altogether, leaving you with no selected asset. This is useful when you need to use a derived asset name, but also have to select and modify assets in ways your current asset won't like. deselectAsset() erases the reference to your currently selected asset, but it is not saved for later use.


		selectAsset("BunBun", "Hitboxes", 0);

		for (e = 0; e < 3; e++) {
			var random1 = Math.floor(Math.random(1,3) * 100);
			var random2 = Math.floor(Math.random(1,9) * 100);

			setFrame(random1);
			setLoopsPerSecond(random2);
		}

		holdAsset();

		selectAsset("Crosshair","Flash",0);
		setLoopsPerSecond(1);

		recallAsset();



		^-----Don't ask, I don't get it either. I was going for BunBun moving fast while the player needs to hit a random point like some 		pin the tail on the donkey shenanigans but ehhhh.


		selectAsset("Prefix", [...Any amount of suffixes], frameInteger)
		selectMulti([same format as in SelectAsset],[some number of similar selectAsset parameters],)
		selectDummy(any amount of valid suffixes with no prefixes)
		holdAsset(no arguments, removes pointer from global variable and places it to a temporary one. can only hold 1)
		recallAsset(no arguments, selects saved asset while erasing the current and saved asset references)
		deselectAsset(no arguments. not sure what you're expecting; nly erases currently selected reference)

		setFrame()
		advanceFrame(integer#ofFramesToAdvance,default1)
		setLoopSpeed(amountOfTimesLoopWillPlayPerSecond)
		stop(empty function. stops all X Y movement and halts animation)

		swapPrefix(changes the name tag for the object while keeping the frame data untouched to select another asset)
		SwapSuffix(keeps name tag, but reference for frame data changes to another subsection of the asset)

		setX()
		setY()
		setXY(x,y)
		nudgeX()
		nudgeY()
		nudgeXY()
		setSpeedX()
		SetSpeedY()
		SetSpeedXY()

		exit(leave current game state)


[Hitboxes]
-Since the nature of the game is VERY flexable and interactive


[Ease of Access tools]
HitboxMaker:
-Click and drag to make translucent box. While held down, follow the cursor. When up, complete the box.
-Spress Space to commit
-Enter hitbox name
-Hit space again to commit name
-hitbox and name show up on list, hitbox lighter
-modes:[select][delete][move][edit][Next][Prev][Export][Onion Toggle][Play](speed adjuster)(animation anchor for loop frame #)

QOL: 
Darj/Light Mode toggles (keep out eyes from seering, maybe add a gradual effect to it so we don't go blind from dark int light)

Animation Stitcher:
-Areas to fill out (and preview) the effects of the SpriteObject in real time using textarea(?) HTML objects
-One button below the list that has [Apply], which will update the XML invisibly.
-The XML object being manipulated will be based off a template which will be read and stored as a string. Using Javascript and conditionals, append and remove tags and values from it. (Use FileReader readAsText() and local href to the current HTML page via <script> to run it).
-The stitcher will also have the ability to take seperate, single frame vector SVGs, and load them all into one "sheet", setting the visibilities of them programatically.
-Once complete, the XML code can be generated and downloaded locally.
-You will also be able to load up old animation XML files (gotta watch out for missing or displaced files).

[Object Structures]

SpriteObject structure:
[
name =
imageSource =
numFrames =
currFrame =
doLoop =
loopSpeed =
loopAnchor =
deadlineTime =
xpos =
ypos =
xSpeed =
ySpeed =
]

Hitbox Object structure :
[
name =
imageSource =
width =
height =
relativeX =
relatieY =
isVisible =
]



[Microgames]
-Using exposed global functions that be called from the main game loop, microgames can be easily modified, added, removed, and duplicated.
1.) Each microgame will be its own file dedicated JUST for that specific game. The only code allowed to be shared across multiple microgames 	 are global methods and variables.
2.) All microgames will have at least six functions: init(), play(), check(), win(), lose(), and meh()
	-init(), code to be run only once as the game is setting up to be played. Assets are called/loaded, variables are reset and modified.


[[ANIMATING VECTORS]]
1.) All vectors are XML files. As such, they are text. A LOT of text. This can be read by the FileReader.
2.) Using a self programmed helper tool, take individual vector files into one big animation XML file.
3.) From the Javascript side: find, traverse through, and draw the requested frame through the individual SVG's id tag (which should be set 	up in the helper tool).
4.) All this:
	<svg xmlns="http://www.w3.org/2000/svg" width="160" height="160">
	 <g>
	  <rect
	    style="fill:#edd154;fill-opacity:1;stroke:#3c352d;stroke-width:2;stroke-opacity:1;"
	    id="square"
	    width="100"
	    height="100"
	    x="30"
	    y="30">
	    <animate
	      id="frame1"
	      attributeName="display"
	      values="inline;none;none;none"
	      keyTimes="0;0.33;0.66;1"
	      dur="1s"
	      begin="0s"
	      repeatCount="indefinite" />
	  </rect>
	  <path
	    style="fill:#edd154;fill-opacity:1;stroke:#3c352d;stroke-width:2;stroke-opacity:1;"
	    id="circle"
	    d="m 125,80 a 45,45 0 1 1 -90,0 45,45 0 1 1 90,0 z">
	    <animate
	      id="frame2"
	      attributeName="display"
	      values="none;inline;none;none"
	      keyTimes="0;0.33;0.66;1"
	      dur="1s"
	      begin="0s"
	      repeatCount="indefinite" />
	  </path>
	  <path
	    style="fill:#edd154;fill-opacity:1;stroke:#3c352d;stroke-width:2;stroke-opacity:1;"
	    id="triangle"
	    d="M 105,105 47,89 89,46 105,105 z">
	    <animate
	      id="frame3"
	      attributeName="display"
	      values="none;none;inline;none"
	      keyTimes="0;0.33;0.66;1"
	      dur="1s"
	      begin="0s"
	      repeatCount="indefinite" />
	  </path>
	 </g>
	</svg>

	The <animate> element comes equipped with various attributes (which you can read more about in the SVG spec) but for our example we’re going to concentrate on just the following…

	attributeName="display"

	    Our example requires us to hide and reveal each shape when necessary. To do this we need to instruct it to alter each shape’s respective display property.

	values="inline;none;none;none"

	    These are specific values related to the display property. In this instance we’re asking it to show the square at the beginning and then hide it again for the remainder of the animation. In contrast our circle (which has a value of none;inline;none;none) will be hidden during the first frame, before appearing for frame two, only to disappear again for the remainder of the animation.

	    Apart from the id attribute this is the only setting in our example that needs to differ for each shape.

	keyTimes="0;0.33;0.66;1"

	    This is a list of time values, which is used to control the pacing of the animation. I’ve split the values into intervals of 0.33 because I want a consistent time delay for each frame. Each time in the list corresponds to a value in the values attribute list, and defines when the value should be used in the animation. There must be exactly as many values in the keyTimes list as in the values list. Each time value must be specified as a floating point between 0 and 1 (inclusive).

	    In our example we need to state four values (even though we only have three frames of animation) because we want it to loop indefinitely (and thus any display value attributed to the keyTimes value of 1 would be ignored by the keyTimes value of 0 for the proceeding animation loop).

	    In effect the fourth value inside the values attribute is redundant, and thus all three shapes have it set to none.

	dur="1s"

	    Here we can state how long our animation will last before looping.

	begin="0s"

	    This sets the start time of our animation.

	repeatCount="indefinite"

	    States how many animation loops we require. This can be replaced with a number for a more specific loop count.
5.) Each frame is being animated in parallel, all with the same start, duration, and end times. keyTime is a PROPORTIONAL count of the frames out of 1. Think of it as percents instead of decimals. Decimals MUST start with 0. "0.34".
6.) When running the game, it's best to call the SVG script as a "src" file since it will be much MUCH too large.
7.) Use SVG groups "<g></g>" tags to make layers once assembled. REMEMBER THE SYSTEM IS FILO, whatever is put on the list first will be the last thing drawn! To have something on the topmost layer, it must be at the at the BOTTOM of the SVG/SML file.



